@startuml consume

partition "Initialize" {
  start
  : Stream.consume();
  : Call **Provider** Executor;
  if (Error?) then (yes)
    : Throw **Error**;
    stop
  else (no) 
    : Provider.open(): Primer;
    if (Error?) then (no)
      : Call **Consumer** Executor;
      if (Error?) then (yes)
        : Provider.close();
        : Throw **Error**;
        stop
      else (no)
        : Consumer.open(primer: Primer): void;
        if (Error?) then (yes)
          : Consumer.close();
          : Provider.close();
          : Throw **Error**;
          stop
        else (no)
          : Return **StreamBroker**;
          : Start **Asynchronous** Process;
          (P)
          detach
        endif
      endif
    else (yes)
      : Provider.close();
      : Throw **Error**;
      stop
    endif
  endif
}

partition "Process" {
  (P)
  if (Externally cancelled?) then (yes)
    stop
  else (no)
    if (Provider.data exists?) then (no)
      (F)
      detach
    else (yes)
      : Provider.data(): StreamResponse<T>;
      if (Error?) then (yes)
        if (Consumer.close exists?) then (no)
          if (Externally cancelled?) then (yes)
            stop
          else (no)
            : Provider.close();
            : Throw **Uncaught Error**;
            stop
          endif
        else (yes)
          (F)
          detach
        endif
      else (no)
        if (Done, returns **{ done: true }**?) then (yes)
          (F)
          detach
        else (no)
          if (Externally cancelled?) then (yes)
            stop
          else (no)
            if (Consumer.data exists?) then (no)
              (F)
              detach
            else (yes)
              : Consumer.data(value: T): Resolve<void | boolean>;
              if (Error?) then (yes)
                if (Externally cancelled?) then (yes)
                  stop
                else (no)
                  : Consumer.close();
                  : Provider.close();
                  : Throw **Uncaught Error**;
                  stop
                endif
              else (no)
                if (Done, returns **true**?) then (yes)
                  (F)
                  detach
                else (no)
                  (P)
                  detach
                endif
              endif
            endif
          endif
        endif
      endif
    endif
  endif
}

partition Finalization {
  (F)
  if (Externally cancelled?) then (yes)
    stop
  else (no)
    : Consumer.close(error?: Error): void;
    if (Error?) then (yes)
      : Provider.close();
      : Throw **Uncaught Error**;
      stop
    else (no)
      : Provider.close();
      if (Error?) then (yes)
        : Throw **Uncaught Error**;
        stop
      else (no)
        stop
      endif
    endif
  endif
}

partition "External Cancellation" {
  start
  : Broker.cancel();
  if (Done?) then (yes)
    stop
  else (no)
    : Consumer.close();
    if (Error?) then (yes)
      : Provider.close();
      : Throw **Error**;
      stop
    else (no)
      : Provider.close();
      if (Error?) then (yes)
        : Throw **Error**;
        stop
      else (no)
        stop
      endif
    endif
  endif
}

@enduml