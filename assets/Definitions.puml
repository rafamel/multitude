@startuml Classes

interface Promise<T> {
  
}

interface Observable<T> {
  
}

interface StreamProvider<T> {
  data(): StreamResult<T>
  close(): void
}

interface StreamConsumer<T> {
  data(value: T): boolean | void
  close(error?: Error): void
}

interface Streamer<T> {
  +data(value: T): void
  +close(error?: Error): void
}

interface StreamResult<T> {
  done: boolean
  value: T
}

StreamBroker <|-- Promise
interface StreamBroker {
  done: boolean
  cancel(): void
}

interface StreamLike<T> {
  execute(): StreamProvider<T>
  consume(consumer: StreamConsumer<T>): StreamBroker
}

Stream <|.. StreamLike
class Stream<T> {
  +constructor(executor: (): StreamProvider<T>): Stream<T>
}

StreamObservable <|-- Stream
StreamObservable <|.. Observable
class StreamObservable<T> {

}

StreamSubject <|-- StreamObservable
StreamSubject <|.. Streamer
class StreamSubject<T> {

}



@enduml
