@startuml Classes

interface StreamProvider<T, Primer> {
  prime(): Primer
  data(): StreamResult<T>
  close(): void
}

interface StreamConsumer<T, Primer> {
  prime(primer: Primer): boolean | void
  data(value: T): boolean | void
  close(error?: Error): void
}

interface StreamResult<T> {
  done: boolean
  value: T
}

interface Promise {
  
}

StreamBroker <|-- Promise
interface StreamBroker {
  done: boolean
  cancel(): void
}

class Stream<T, Primer> {
  +constructor(executor: (): StreamProvider<T, Primer>): Stream<T, Primer>
}

SubjectStream <|.. Stream
class SubjectStream<T, Primer> {
  +data(value: T): void
  +close(error?: Error): void
}

@enduml
